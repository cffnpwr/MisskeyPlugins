{
  "type": "plugin",
  "data": "/// @ 0.19.0\n### {\n  id: "0cfcb096-284c-d087-b364-53e16d356d1b"\n  name: "フォロワー消失を通知するプラグイン(β)"\n  version: "0.1.0"\n  author: "elysion"\n  description: "フォロワーが消失していたら通知します。"\n  permissions: ["read:account", "read:following", "write:notifications"]\n  config: {\n    intervalMin: {\n      type: "number"\n      label: "フォロワー消失確認の更新間隔(分)"\n      description: "既定値(10)"\n      default: 10\n    }\n    fBlockingNotify: {\n      type: "boolean",\n      label: "ブロックしたユーザーの通知: 無効/有効"\n      description: "ブロックしたユーザーの通知をするかどうか"\n      default: true\n    }\n    fDetailInfoNotify: {\n      type: "boolean"\n      label: "詳細情報: 無効/有効"\n      description: "ユーザーとの関係やサーバー情報などを表示するかどうか"\n      default: true\n    }\n  }\n}\n\n// フォロワー取得\n// param: limit<num>\n// return: <arr>\n@getFollowers(limit) {\n  let func = @(limit, params) {\n    if (params.limit <= 0) {\n      return []\n    }\n    let followers = Mk:api("users/followers", params)\n    if (followers.len < params.limit) {\n      return followers\n    }\n    limit -= params.limit\n    return followers.concat(func(limit, {\n      userId: params.userId,\n      limit: Math:min(limit, 100),\n      untilId: followers[followers.len - 1].id\n    }))\n  }\n  return func(limit, {\n    userId: USER_ID,\n    limit: Math:min(limit, 100)\n  })\n}\n\n// サーバーの状況確認\n// param: gone_follower_host<str>\n// return: <str>\n@getServerStatus(gone_follower_host) {\n  var status = ""\n  let server = Mk:api("federation/show-instance", {\n    host: gone_follower_host\n  })\n  if server == null || Core:type(server) == "error" {\n    status = "不明なサーバー"\n  } else {\n    if server.isSuspended {\n      // サ\n      match server.suspensionState {\n        "none" => { status = "配信中" }\n        "manuallySuspended" => { status = "手動停止中" }\n        "goneSuspended" => { status = "削除のため停止中" }\n        "autoSuspendedForNotResponding" => { status = "応答なしのため停止中" }\n      }\n    } else {\n      // レスポンスがなければ応答なし\n      // そうでなければ配信中\n      if server.isNotResponding status = "応答なし" else status = "配信中"\n    }\n  }\n  return status\n}\n\nlet interval = eval {\n  if Plugin:config.intervalMin < 10 {\n    Mk:dialog("フォロワー消失を通知するプラグイン(β)", [\n      `更新間隔の指定に誤りがあります。`\n      `自動で **{10}** が適用されます。`\n    ].join(Str:lf), "warning")\n  }\n  (Plugin:config.intervalMin * 60000)\n}\n\nAsync:interval(interval, @() {\n  // ユーザー\n  let user = Mk:api("users/show", {\n    userId: USER_ID\n  })\n  // 旧フォロワーリスト\n  var old_followers = null\n  // 新フォロワーリスト\n  var new_followers = null\n  // ブロックした際の通知フラグ\n  let fBlockingNotify = Plugin:config.fBlockingNotify\n  // 詳細通知フラグ\n  let fDetailInfoNotify = Plugin:config.fDetailInfoNotify\n\n  // データ読み込み\n  old_followers = Mk:load(`@{USER_ID}/follower_data`)\n\n  if old_followers != null && old_followers != "" {\n    // 現在のフォロワーを取得\n    new_followers = getFollowers(user.followersCount).map(@(v) {\n      {\n        id: v.follower.id,\n        name: v.follower.name,\n        username: v.follower.username,\n        host: v.follower.host,\n        memo: v.memo\n      }\n    })\n  } else {\n    // 初回動作\n    // 現在のフォロワーを取得\n    old_followers = getFollowers(user.followersCount).map(@(v) {\n      {\n        id: v.follower.id,\n        name: v.follower.name,\n        username: v.follower.username,\n        host: v.follower.host,\n        memo: v.memo\n      }\n    })\n    // 現在のフォロワーを取得\n    new_followers = getFollowers(user.followersCount).map(@(v) {\n      {\n        id: v.follower.id,\n        name: v.follower.name,\n        username: v.follower.username,\n        host: v.follower.host,\n        memo: v.memo\n      }\n    })\n  }\n  // セーブ\n  Mk:save(`@{USER_ID}/follower_data`, new_followers)\n\n  // 新旧フォロワー情報の差分\n  let gone_followers = old_followers.filter(@(old) {\n    let fExists = new_followers.some(@(new) {\n      return old.id == new.id\n    })\n    return !fExists\n  })\n\n  // 差分があったら\n  if gone_followers.len > 0 {\n    // 通知メッセージ用\n    let notifyBodyMfm = []\n    \n    each (let gone_follower, gone_followers) {\n      var account_status = ""\n      var server_status = ""\n      // いなくなったフォロワーのユーザー情報\n      let gone_follower_user = Mk:api("users/show", {\n        userId: gone_follower.id\n      })\n\n      if Core:type(gone_follower_user) == "error" {\n        account_status = "アカウント削除(or不明)"\n        if gone_follower.host != null {\n          // ユーザーのホストの状況確認\n          server_status = getServerStatus(gone_follower.host)\n          if server_status == "配信中" {\n            account_status = "アカウント削除"\n          }\n        }\n      } else {\n        // 念のためフォローが外れているか確認\n        if gone_follower_user.isFollowed contonue\n        // プラグイン設定のブロックした際の通知がOFFの場合は除外\n        if gone_follower_user.isBlocking && !fBlockingNotify continue\n\n        // 現在のあなたとの状態確認\n        if gone_follower_user.isBlocked {\n          if gone_follower_user.isBlocking {\n            account_status = "相互ブロック"\n          } else {\n            account_status = "ブロックされています"\n          }\n        } else if gone_follower_user.isBlocking {\n          account_status = "ブロックしています"\n        } else {\n          if gone_follower_user.isFollowing {\n            account_status = "リムーブ(片思い)"\n          } else {\n            account_status = "リムーブ(無関心)"\n          }\n        }\n        // ユーザーのホストの状況確認\n        if gone_follower.host != null server_status = getServerStatus(gone_follower.host)\n      }\n      // メッセージ追加\n      notifyBodyMfm.push(`{if gone_follower.host != null `@{gone_follower.username}@{gone_follower.host}` else `@{gone_follower.username}`}`)\n      // プラグイン設定の詳細通知がONなら追加\n      if fDetailInfoNotify { \n        notifyBodyMfm.push(`　<small>状態: {account_status}</small>`)\n        if server_status != "" notifyBodyMfm.push(`　<small>サーバーの状態: {server_status}</small>`)\n        if gone_follower.memo != null notifyBodyMfm.push(`　<small>あなたのメモ: {gone_follower.memo}</small>`)\n      }\n    }\n\n    if notifyBodyMfm.len > 0 {\n      // 通知の送信\n      Mk:api("notifications/create", {\n        header: "フォロワー消失通知(β)",\n        body: notifyBodyMfm.join(Str:lf),\n        icon: `{SERVER_URL}/twemoji/1f44b.svg`\n      })\n    }\n  }\n}, true)"
}
