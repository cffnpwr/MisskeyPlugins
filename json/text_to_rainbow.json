{
  "type": "plugin",
  "data": "/// @ 0.16.0\n### {\n  id: \"73f6e561-afbb-4ddd-a9ce-bee9964844a8\"\n  name: \"入力されている文字をレインボーにするプラグイン\"\n  version: \"2.0.0\"\n  author: \"elysion\"\n  description: \"投稿メニューに【変換：レインボー文字】追加します。\"\n  config: {\n    hex: {\n      type: \"string\"\n      label: \"開始する色(000000〜ffffff)\"\n      description: \"既定値：#ff0000(他：#f00 f00等)\"\n      default: \"#ff0000\"\n    }\n  }\n}\n\n@Color() {\n  let this = {\n    r: 0\n    g: 0\n    b: 0\n    max: 0\n    min: 0\n    maxStr: \"\"\n    hue: 0\n    angle: 0\n    constructor: @() {\n      this.r = 0\n      this.g = 0\n      this.b = 0\n      this.max = 0\n      this.min = 0\n      this.maxStr = \"\"\n      this.hue = 0\n      this.angle = 0\n      this\n    }\n    setAngle: @(angle) { this.angle = angle }\n    getAngle: @() { this.angle }\n    getHue: @() { this.hue }\n    checkRange: @(name, value, def_color) {\n      if !(value >= 0 && value <= 255) {\n        Mk:dialog(\"warning\", [\n          `{name}値が0〜255内にありません。`\n          `{name}値：{value}`\n          `既定値『$[fg.color=ff0000 **{value_default}**]』を使用します。`\n        ].join(Str:lf), \"warning\")\n        value = def_color\n      }\n      value\n    }\n    hex2RGB: @(hex) {\n      if (hex.slice(0, 1) == \"#\") {\n        hex = hex.slice(1, hex.len)\n      }\n      if (hex.len == 3) {\n        hex = [\n          hex.slice(0, 1) hex.slice(0, 1)\n          hex.slice(1, 2) hex.slice(1, 2)\n          hex.slice(2, 3) hex.slice(2, 3)\n        ].join()\n      }\n      if (hex.len != 6) {\n        Mk:dialog(\"warning\", [\n          `値が異常です。`\n          `値：{hex}`\n          `既定値『$[fg.color=ff0000 **ff0000**]』を使用します。`\n        ].join(Str:lf), \"warning\")\n        hex = \"ff0000\"\n      }\n      var value = 0\n      value = Num:from_hex(hex.slice(0, 2))\n      this.r = this.checkRange(\"R\", value, 255)\n      this.max = this.r\n      this.min = this.r\n      this.maxStr = \"R\"\n\n      value = Num:from_hex(hex.slice(2, 4))\n      this.g = this.checkRange(\"G\", value, 0)\n      if (this.max < this.g) {\n        this.max = this.g\n        this.maxStr = \"G\"\n      }\n      if (this.min > this.g) {\n        this.min = this.g\n      }\n      value = Num:from_hex(hex.slice(4, 6))\n      this.b = this.checkRange(\"B\", value, 0)\n      if (this.max < this.b) {\n        this.max = this.b\n        this.maxStr = \"B\"\n      }\n      if (this.min > this.b) {\n        this.min = this.b\n      }\n    }\n    rgb2Hue: @() {\n      var hue = 0\n      if ((this.r == this.g) && (this.r == this.b)) {\n        hue = 0\n      } else {\n        match this.maxStr {\n          \"R\" => { hue = 60 * (this.g - this.b) / (this.max - this.min) }\n          \"G\" => { hue = 60 * (this.b - this.r) / (this.max - this.min) + 120 }\n          \"B\" => { hue = 60 * (this.r - this.g) / (this.max - this.min) + 240 }\n          * => { hue = 0 }\n        }\n      }\n      if (hue < 0) {\n        hue = hue + 360\n      }\n      this.hue = Math:floor(hue)\n    }\n    hue2RGB: @(hue) {\n      let color = {\n        r: 0\n        g: 0\n        b: 0\n      }\n      match true {\n        (hue < 60) => {\n          color.r = this.max\n          color.g = (hue / 60) * (this.max - this.min) + this.min\n          color.b = this.min\n        }\n        (hue < 120) => {\n          color.r = ((120 - hue) / 60) * (this.max - this.min) + this.min\n          color.g = this.max\n          color.b = this.min\n        }\n        (hue < 180) => {\n          color.r = this.min\n          color.g = this.max\n          color.b = ((hue - 120) / 60) * (this.max - this.min) + this.min\n        }\n        (hue < 240) => {\n          color.r = this.min\n          color.g = ((240 - hue) / 60) * (this.max - this.min) + this.min\n          color.b = this.max\n        }\n        (hue < 300) => {\n          color.r = ((hue - 240) / 60) * (this.max - this.min) + this.min\n          color.g = this.min\n          color.b = this.max\n        }\n        * => {\n          color.r = this.max\n          color.g = this.min\n          color.b = ((360 - hue) / 60) * (this.max - this.min) + this.min\n        }\n      }\n      color\n    }\n    rgb2Hex: @(color) {\n      let hex = {\n        r: Num:to_hex(Math:round(color.r))\n        g: Num:to_hex(Math:round(color.g))\n        b: Num:to_hex(Math:round(color.b))\n      }\n      if (hex.r.len < 2) { hex.r = `0{hex.r}` }\n      if (hex.g.len < 2) { hex.g = `0{hex.g}` }\n      if (hex.b.len < 2) { hex.b = `0{hex.b}` }\n      var hex_str = `{hex.r}{hex.g}{hex.b}`\n      hex_str\n    }\n  }\n  this.constructor()\n}\n\nPlugin:register_post_form_action(\"変換：レインボー文字\", @(form, update) {\n  let textArray = form.text.split()\n  let unlf_len = textArray.len - form.text.split(Str:lf).len\n  var output = \"\"\n\n  let color = Color()\n  color.setAngle(360 / unlf_len)\n  color.hex2RGB(Plugin:config.hex)\n  color.rgb2Hue()\n\n  var count = 0\n  each (let text, textArray) {\n    if (text != Str:lf) {\n      var hue = Math:round(Math:abs(\n        color.getAngle() * count + color.getHue()\n      ))\n      if (hue > 360) {\n        hue = (hue - 360)\n      }\n      let color_rgb = color.hue2RGB(hue)\n      let color_hex = color.rgb2Hex(color_rgb)\n      \n      output = `{output}$[fg.color={color_hex} {text}]`\n      count += 1\n    } else {\n      output = `{output}{text}`\n    }\n  }\n  update(\"text\", output)\n})"
}
