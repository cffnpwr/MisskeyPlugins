/// @ 0.16.0
### {
  id: "73f6e561-afbb-4ddd-a9ce-bee9964844a8"
  name: "入力されている文字をレインボーにするプラグイン"
  version: "2.0.0"
  author: "elysion"
  description: "投稿メニューに【変換：レインボー文字】追加します。"
  config: {
    hex: {
      type: "string"
      label: "開始する色(000000〜ffffff)"
      description: "既定値：#ff0000(他：#f00 f00等)"
      default: "#ff0000"
    }
  }
}

@Color() {
  let this = {
    r: 0
    g: 0
    b: 0
    max: 0
    min: 0
    maxStr: ""
    hue: 0
    angle: 0
    constructor: @() {
      this.r = 0
      this.g = 0
      this.b = 0
      this.max = 0
      this.min = 0
      this.maxStr = ""
      this.hue = 0
      this.angle = 0
      this
    }
    setAngle: @(angle) { this.angle = angle }
    getAngle: @() { this.angle }
    getHue: @() { this.hue }
    checkRange: @(name, value, def_color) {
      if !(value >= 0 && value <= 255) {
        Mk:dialog("warning", [
          `{name}値が0〜255内にありません。`
          `{name}値：{value}`
          `既定値『$[fg.color=ff0000 **{value_default}**]』を使用します。`
        ].join(Str:lf), "warning")
        value = def_color
      }
      value
    }
    hex2RGB: @(hex) {
      if (hex.slice(0, 1) == "#") {
        hex = hex.slice(1, hex.len)
      }
      if (hex.len == 3) {
        hex = [
          hex.slice(0, 1) hex.slice(0, 1)
          hex.slice(1, 2) hex.slice(1, 2)
          hex.slice(2, 3) hex.slice(2, 3)
        ].join()
      }
      if (hex.len != 6) {
        Mk:dialog("warning", [
          `値が異常です。`
          `値：{hex}`
          `既定値『$[fg.color=ff0000 **ff0000**]』を使用します。`
        ].join(Str:lf), "warning")
        hex = "ff0000"
      }
      var value = 0
      value = Num:from_hex(hex.slice(0, 2))
      this.r = this.checkRange("R", value, 255)
      this.max = this.r
      this.min = this.r
      this.maxStr = "R"

      value = Num:from_hex(hex.slice(2, 4))
      this.g = this.checkRange("G", value, 0)
      if (this.max < this.g) {
        this.max = this.g
        this.maxStr = "G"
      }
      if (this.min > this.g) {
        this.min = this.g
      }
      value = Num:from_hex(hex.slice(4, 6))
      this.b = this.checkRange("B", value, 0)
      if (this.max < this.b) {
        this.max = this.b
        this.maxStr = "B"
      }
      if (this.min > this.b) {
        this.min = this.b
      }
    }
    rgb2Hue: @() {
      var hue = 0
      if ((this.r == this.g) && (this.r == this.b)) {
        hue = 0
      } else {
        match this.maxStr {
          "R" => { hue = 60 * (this.g - this.b) / (this.max - this.min) }
          "G" => { hue = 60 * (this.b - this.r) / (this.max - this.min) + 120 }
          "B" => { hue = 60 * (this.r - this.g) / (this.max - this.min) + 240 }
          * => { hue = 0 }
        }
      }
      if (hue < 0) {
        hue = hue + 360
      }
      this.hue = Math:floor(hue)
    }
    hue2RGB: @(hue) {
      let color = {
        r: 0
        g: 0
        b: 0
      }
      match true {
        (hue < 60) => {
          color.r = this.max
          color.g = (hue / 60) * (this.max - this.min) + this.min
          color.b = this.min
        }
        (hue < 120) => {
          color.r = ((120 - hue) / 60) * (this.max - this.min) + this.min
          color.g = this.max
          color.b = this.min
        }
        (hue < 180) => {
          color.r = this.min
          color.g = this.max
          color.b = ((hue - 120) / 60) * (this.max - this.min) + this.min
        }
        (hue < 240) => {
          color.r = this.min
          color.g = ((240 - hue) / 60) * (this.max - this.min) + this.min
          color.b = this.max
        }
        (hue < 300) => {
          color.r = ((hue - 240) / 60) * (this.max - this.min) + this.min
          color.g = this.min
          color.b = this.max
        }
        * => {
          color.r = this.max
          color.g = this.min
          color.b = ((360 - hue) / 60) * (this.max - this.min) + this.min
        }
      }
      color
    }
    rgb2Hex: @(color) {
      let hex = {
        r: Num:to_hex(Math:round(color.r))
        g: Num:to_hex(Math:round(color.g))
        b: Num:to_hex(Math:round(color.b))
      }
      if (hex.r.len < 2) { hex.r = `0{hex.r}` }
      if (hex.g.len < 2) { hex.g = `0{hex.g}` }
      if (hex.b.len < 2) { hex.b = `0{hex.b}` }
      var hex_str = `{hex.r}{hex.g}{hex.b}`
      hex_str
    }
  }
  this.constructor()
}

Plugin:register_post_form_action("変換：レインボー文字", @(form, update) {
  let textArray = form.text.split()
  let unlf_len = textArray.len - form.text.split(Str:lf).len
  var output = ""

  let color = Color()
  color.setAngle(360 / unlf_len)
  color.hex2RGB(Plugin:config.hex)
  color.rgb2Hue()

  var count = 0
  each (let text, textArray) {
    if (text != Str:lf) {
      var hue = Math:round(Math:abs(
        color.getAngle() * count + color.getHue()
      ))
      if (hue > 360) {
        hue = (hue - 360)
      }
      let color_rgb = color.hue2RGB(hue)
      let color_hex = color.rgb2Hex(color_rgb)
      
      output = `{output}$[fg.color={color_hex} {text}]`
      count += 1
    } else {
      output = `{output}{text}`
    }
  }
  update("text", output)
})
